} else if(file_type == "csv") {
time <- read_csv2(
input$file1$datapath,
n_max = 1,
col_names = TRUE
) %>%
janitor::clean_names()
t_start <- find_time_start_SDCard(
input,
time)
df <- read.csv2(
file = input$file1$datapath,
header = F,
skip = 2
)
names(df) <- names(time)
}
df <- df %>%
select(
-hold,
-auto_dest_diff,
-cw_act) %>%
as.data.frame() %>%
mutate(Date = time_s + t_start) %>%
mutate(Time_hours = (time_s / 60) / 60)
names_full <- c(
"Time (in seconds)",
"PressureAct (in mbar)",
"PressureSet (in mbar)",
"BathAct (in °C)",
"BathSet (in °C)",
"ChillerAct (in °C)",
"ChillerSet (in °C)",
"Rotation (in rpm)",
"Vapor (in °C)",
"Foam present (binary)",
"Foam control (binary)",
"Date",
"Time (in hours)"
)
names(df) <- names_full
df
}
#' find_time_start_SDCard
#'
#' @param input user input
#' @param time time from user input
#'
#' @import dplyr
#' @import lubridate
#'
find_time_start_SDCard <- function(input, time) {
if (input$ManualTime == "On") {
t_start <- clean_time_date_input(input)
} else {
t_start <- time %>%
mutate(
time_s = lubridate::dmy_hm(
time_s)) %>%
pull(time_s)
}
t_start
}
#' clean_time_date_input
#'
#' @param input user input
#'
clean_time_date_input <- function(input) {
TimeInput <- strftime(
input$TimeInput,
format="%H:%M:%S")
t_start <- lubridate::ymd_hms(
paste(input$DateInput,
TimeInput))
t_start
}
t_start <- clean_time_date_input(input)
input
input$DateInput <- "2020:12:20"
TimeInput <- strftime(
input$TimeInput,
format="%H:%M:%S")
input$TimeInput
strftime(
input$TimeInput,
format="%H:%M:%S")
Sys.time()
input$TimeInput <- Sys.time()
input$DateInput <- "2020:12:20"
TimeInput <- strftime(
input$TimeInput,
format="%H:%M:%S")
TimeInput
t_start <- lubridate::ymd_hms(
paste(input$DateInput,
TimeInput))
t_start
t_start <- clean_time_date_input(input)
t_start
df <- read.csv(
input$file1$datapath,
header = T) %>%
janitor::clean_names()
df <- df %>%
select(-hold,
-auto_dest_diff,
-auto_dest_in,
-auto_dest_out,
-lift_act,
-lift_end,
-pump_act_0_1,
-vac_open) %>%
as.data.frame() %>%
mutate(Date = time_s + t_start) %>%
mutate(Time_hours = (time_s / 60) / 60)
names_full <- c(
"Time (in seconds)",
"PressureAct (in mbar)",
"PressureSet (in mbar)",
"BathAct (in °C)",
"BathSet (in °C)",
"ChillerAct (in °C)",
"ChillerSet (in °C)",
"Rotation (in rpm)",
"Vapor (in °C)",
"Foam control (binary)",
"Date",
"Time (in hours)"
)
names(df) <- names_full
df
PathOpenInterface <- "../testfiles/record from browser.csv"
input <- list(
file1 = list(
datapath = PathOpenInterface
)
)
input$TimeInput <- Sys.time()
input$DateInput <- "2020:12:20"
t_start <- clean_time_date_input(input)
df <- read.csv(
input$file1$datapath,
header = T) %>%
janitor::clean_names()
df <- df %>%
select(-hold,
-auto_dest_diff,
-auto_dest_in,
-auto_dest_out,
-lift_act,
-lift_end,
-pump_act_0_1,
-vac_open) %>%
as.data.frame() %>%
mutate(Date = time_s + t_start) %>%
mutate(Time_hours = (time_s / 60) / 60)
names_full <- c(
"Time (in seconds)",
"PressureAct (in mbar)",
"PressureSet (in mbar)",
"BathAct (in °C)",
"BathSet (in °C)",
"ChillerAct (in °C)",
"ChillerSet (in °C)",
"Rotation (in rpm)",
"Vapor (in °C)",
"Foam control (binary)",
"Date",
"Time (in hours)"
)
names(df) <- names_full
library(dplyr)
PathSDCard <- "../testfiles/22-04-26-10-08-37.csv"
PathOpenInterface <- "../testfiles/record by openinterface - Kopi.csv"
input <- list(
file1 = list(
datapath = PathOpenInterface
)
)
input$TimeInput <- Sys.time()
input$DateInput <- "2020:12:20"
t_start <- clean_time_date_input(input)
df <- read.csv(
input$file1$datapath,
header = T) %>%
janitor::clean_names()
df <- df %>%
select(-hold,
-auto_dest_diff,
-auto_dest_in,
-auto_dest_out,
-lift_act,
-lift_end,
-pump_act_0_1,
-vac_open) %>%
as.data.frame() %>%
mutate(Date = time_s + t_start) %>%
mutate(Time_hours = (time_s / 60) / 60)
names_full <- c(
"Time (in seconds)",
"PressureAct (in mbar)",
"PressureSet (in mbar)",
"BathAct (in °C)",
"BathSet (in °C)",
"ChillerAct (in °C)",
"ChillerSet (in °C)",
"Rotation (in rpm)",
"Vapor (in °C)",
"Foam control (binary)",
"Date",
"Time (in hours)"
)
names(df) <- names_full
df
df <- read.csv(
input$file1$datapath,
header = T) %>%
janitor::clean_names()
df
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
t_start <- clean_time_date_input(input)
df <- read.csv(
input$file1$datapath,
header = T) %>%
janitor::clean_names()
input$SecondsToSubtract <- "2"
input$SecondsToSubtract <- 2
t_start <- clean_time_date_input(input)
df <- read.csv(
input$file1$datapath,
header = T) %>%
janitor::clean_names()
df <- df %>%
rename(time_s_orig = time_s) %>%
mutate(time_s = time_s-input$SecondsToSubtract) %>%
select(-hold,
-auto_dest_diff,
-auto_dest_in,
-auto_dest_out,
-lift_act,
-lift_end,
-pump_act_0_1,
-vac_open) %>%
as.data.frame() %>%
mutate(Date = time_s + t_start) %>%
mutate(Time_hours = (time_s / 60) / 60)
library(dplyr)
PathSDCard <- "../testfiles/22-04-26-10-08-37.csv"
PathOpenInterface <- "../testfiles/record by openinterface - Kopi.csv"
input <- list(
file1 = list(
datapath = PathOpenInterface
)
)
input$TimeInput <- Sys.time()
input$DateInput <- "2020:12:20"
input$SecondsToSubtract <- 2
t_start <- clean_time_date_input(input)
df <- read.csv(
input$file1$datapath,
header = T) %>%
janitor::clean_names()
df <- df %>%
rename(time_s_orig = time_s) %>%
mutate(time_s = time_s-input$SecondsToSubtract) %>%
select(-hold,
-auto_dest_diff,
-auto_dest_in,
-auto_dest_out,
-lift_act,
-lift_end,
-pump_act_0_1,
-vac_open) %>%
as.data.frame() %>%
mutate(Date = time_s + t_start) %>%
mutate(Time_hours = (time_s / 60) / 60)
t_start <- clean_time_date_input(input)
df <- read.csv(
input$file1$datapath,
header = T) %>%
janitor::clean_names()
df <- df %>%
mutate(time_s_orig = time_s) %>%
mutate(time_s = time_s-input$SecondsToSubtract) %>%
select(-hold,
-auto_dest_diff,
-auto_dest_in,
-auto_dest_out,
-lift_act,
-lift_end,
-pump_act_0_1,
-vac_open) %>%
as.data.frame() %>%
mutate(Date = time_s + t_start) %>%
mutate(Time_hours = (time_s / 60) / 60)
names_full <- c(
"Time (in seconds)",
"PressureAct (in mbar)",
"PressureSet (in mbar)",
"BathAct (in °C)",
"BathSet (in °C)",
"ChillerAct (in °C)",
"ChillerSet (in °C)",
"Rotation (in rpm)",
"Vapor (in °C)",
"Foam control (binary)",
"Date",
"Time (in hours)"
)
names(df) <- names_full
df
df <- read.csv(
input$file1$datapath,
header = T) %>%
janitor::clean_names()
df <- df %>%
mutate(time_s_orig = time_s) %>%
mutate(time_s = time_s-input$SecondsToSubtract) %>%
select(-hold,
-auto_dest_diff,
-auto_dest_in,
-auto_dest_out,
-lift_act,
-lift_end,
-pump_act_0_1,
-vac_open) %>%
as.data.frame() %>%
mutate(Date = time_s + t_start) %>%
mutate(Time_hours = (time_s / 60) / 60) %>%
select(time_s, time_s_orig, everything())
df
input$SecondsToSubtract <- 1000
df <- read.csv(
input$file1$datapath,
header = T) %>%
janitor::clean_names()
df <- df %>%
mutate(time_s_orig = time_s) %>%
mutate(time_s = time_s-input$SecondsToSubtract) %>%
select(-hold,
-auto_dest_diff,
-auto_dest_in,
-auto_dest_out,
-lift_act,
-lift_end,
-pump_act_0_1,
-vac_open) %>%
as.data.frame() %>%
mutate(Date = time_s + t_start) %>%
mutate(Time_hours = (time_s / 60) / 60) %>%
select(time_s, time_s_orig, everything())
names_full <- c(
"Time (in seconds)",
"PressureAct (in mbar)",
"PressureSet (in mbar)",
"BathAct (in °C)",
"BathSet (in °C)",
"ChillerAct (in °C)",
"ChillerSet (in °C)",
"Rotation (in rpm)",
"Vapor (in °C)",
"Foam control (binary)",
"Date",
"Time (in hours)",
""
)
names(df) <- names_full
df
View(df)
df <- read.csv(
input$file1$datapath,
header = T) %>%
janitor::clean_names()
df <- df %>%
mutate(time_s_orig = time_s) %>%
mutate(time_s = time_s-input$SecondsToSubtract) %>%
select(-hold,
-auto_dest_diff,
-auto_dest_in,
-auto_dest_out,
-lift_act,
-lift_end,
-pump_act_0_1,
-vac_open) %>%
as.data.frame() %>%
mutate(Date = time_s + t_start) %>%
mutate(Time_hours = (time_s / 60) / 60) %>%
select(time_s, time_s_orig, everything())
names_full <- c(
"Corrected Time (in seconds)",
"Original Time (in seconds)",
"PressureAct (in mbar)",
"PressureSet (in mbar)",
"BathAct (in °C)",
"BathSet (in °C)",
"ChillerAct (in °C)",
"ChillerSet (in °C)",
"Rotation (in rpm)",
"Vapor (in °C)",
"Foam control (binary)",
"Date",
"Time (in hours)"
)
names(df) <- names_full
df
View(df)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
View(df)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
View(df)
df <- read.csv(
input$file1$datapath,
header = T) %>%
janitor::clean_names()
df <- df %>%
mutate(time_s_orig = time_s) %>%
mutate(time_s = time_s-input$SecondsToSubtract) %>%
select(-hold,
-auto_dest_diff,
-auto_dest_in,
-auto_dest_out,
-lift_act,
-lift_end,
-pump_act_0_1,
-vac_open) %>%
as.data.frame() %>%
mutate(Date = time_s + t_start) %>%
mutate(Time_hours = (time_s / 60) / 60) %>%
select(time_s, time_s_orig, everything())
names_full <- c(
"Time (in seconds)",
"Original Time (in seconds)",
"PressureAct (in mbar)",
"PressureSet (in mbar)",
"BathAct (in Degrees C)",
"BathSet (in Degrees C)",
"ChillerAct (in Degrees C)",
"ChillerSet (in Degrees C)",
"Rotation (in rpm)",
"Vapor (in Degrees C)",
"Foam control (binary)",
"Date",
"Time (in hours)"
)
names(df) <- names_full
df
View(df)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
## Local, CRAN or Package Manager ----
## This will build a tar.gz that can be installed locally,
## sent to CRAN, or to a package manager
devtools::build()
install.packages("devtools")
## Local, CRAN or Package Manager ----
## This will build a tar.gz that can be installed locally,
## sent to CRAN, or to a package manager
devtools::build()
## Local, CRAN or Package Manager ----
## This will build a tar.gz that can be installed locally,
## sent to CRAN, or to a package manager
devtools::build()
